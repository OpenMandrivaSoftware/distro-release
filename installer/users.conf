---
defaultGroups:
    - name: users
      must_exist: true
      system: true
    - lp
    - lpadmin
    - video
    - network
    - storage
    - wheel
    - audio
    - sambashare
# (crazy) NOTE: lp group changed meaning , blame Apple for that.
# first user need be in lpadmin group to be able to do anything with
# the cups setup from any GUI apps.

autologinGroup:  autologin
doAutologin:     false
sudoersGroup:    wheel
sudoersConfigureWithGroup: false
setRootPassword: true
doReusePassword: false

# These are optional password-requirements that a distro can enforce
# on the user. The values given in this sample file disable each check,
# as if the check was not listed at all.
#
# Checks may be listed multiple times; each is checked separately,
# and no effort is done to ensure that the checks are consistent
# (e.g. specifying a maximum length less than the minimum length
# will annoy users).
#
# (additional checks may be implemented in UsersPage.cpp)
passwordRequirements:
    minLength: -1  # Password at least this many characters
    maxLength: -1 # Password at most this many characters
#    libpwquality:
#        - minlen=0
#        - minclass=0

# You can control the visibility of the 'strong passwords' checkbox here.
# Possible values are: 
#  - true to show or 
#  - false to hide  (default)
# the checkbox. This checkbox allows the user to choose to disable
# password-strength-checks. By default the box is **hidden**, so
# that you have to pick a password that satisfies the checks.
allowWeakPasswords: false
# You can control the initial state for the 'strong passwords' checkbox here.
# Possible values are: 
#  - true to uncheck or 
#  - false to check (default)
# the checkbox by default. Since the box is labeled to enforce strong
# passwords, in order to **allow** weak ones by default, the box needs
# to be unchecked.
allowWeakPasswordsDefault: false

# User settings
#
# The user can enter a username, but there are some other
# hidden settings for the user which are configurable in Calamares.
#
# Key *user* has the following sub-keys:
#
# - *shell* Shell to be used for the regular user of the target system.
#   There are three possible kinds of settings:
#    - unset (i.e. commented out, the default), act as if set to /bin/bash
#    - empty (explicit), don't pass shell information to useradd at all
#      and rely on a correct configuration file in /etc/default/useradd
#    - set, non-empty, use that path as shell. No validation is done
#      that the shell actually exists or is executable.
# - *forbidden_names* Login names that may not be used. This list always
#   contains "root" and "nobody", but may be extended to list other special
#   names for a given distro (eg. "video", or "mysql" might not be a valid
#   end-user login name).
user:
#  shell: /bin/bash
  forbidden_names: [ root ]

# Hostname setting
#
# The user can enter a hostname; this is configured into the system
# in some way; pick one of:
#   - *None*, to not set the hostname at all
#   - *EtcFile*, to write to `/etc/hostname` directly
#   - *Hostnamed*, to use systemd hostnamed(1) over DBus
# The default is *EtcFile*.
setHostname: EtcFile

# Should /etc/hosts be written with a hostname for this machine
# (also adds localhost and some ipv6 standard entries).
writeHostsFile: true

# Hostname settings
#
# The user can enter a hostname; this is configured into the system
# in some way. There are settings for how a hostname is guessed (as
# a default / suggestion) and where (or how) the hostname is set in
# the target system.
#
# Key *hostname* has the following sub-keys:
#
# - *location* How the hostname is set in the target system:
#   - *None*, to not set the hostname at all
#   - *EtcFile*, to write to `/etc/hostname` directly
#   - *Etc*, identical to above
#   - *Hostnamed*, to use systemd hostnamed(1) over DBus
#   - *Transient*, to remove `/etc/hostname` from the target
#   The default is *EtcFile*. Setting this to *None* or *Transient* will
#   hide the hostname field.
# - *writeHostsFile* Should /etc/hosts be written with a hostname for
#   this machine (also adds localhost and some ipv6 standard entries).
#   Defaults to *true*.
# - *template* Is a simple template for making a suggestion for the
#   hostname, based on user data. The default is "${first}-${product}".
#   This is used only if the hostname field is shown. KMacroExpander is
#   used; write `${key}` where `key` is one of the following:
#   - *first* User's first name (whatever is first in the User Name field,
#     which is first-in-order but not necessarily a "first name" as in
#     "given name" or "name by which you call someone"; beware of western bias)
#   - *name* All the text in the User Name field.
#   - *login* The login name (which may be suggested based on User Name)
#   - *product* The hardware product, based on DMI data
#   - *product2* The product as described by Qt
#   - *cpu* CPU name
#   - *host* Current hostname (which may be a transient hostname)
#   Literal text in the template is preserved. Calamares tries to map
#   `${key}` values to something that will fit in a hostname, but does not
#   apply the same to literal text in the template. Do not use invalid
#   characters in the literal text, or no suggeston will be done.
# - *forbidden_names* lists hostnames that may not be used. This list
#   always contains "localhost", but may list others that are unsuitable
#   or broken in special ways.
hostname:
  location: EtcFile
  writeHostsFile: true
  template: "openmandriva-${cpu}"
  forbidden_names: [ localhost ]

presets:
    fullName:
        # value: "OEM User"
        editable: true
    loginName:
        # value: "oem"
        editable: true
